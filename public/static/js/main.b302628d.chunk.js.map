{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["ItemDone","props","className","type","name","id","checked","disabled","item","title","Item","useState","edit","setEdit","isDone","check","setCheck","setTitle","inputElement","useRef","onChange","handleCheck","index","isWorking","value","e","target","ref","onClick","handleEdit","setWorking","handleDetele","_id","App","list","setList","listDone","setListDone","showListDone","setShowListDone","msg","setMsg","error","setError","formInput","useEffect","fetch","then","rs","status","json","text","catch","console","log","method","body","JSON","stringify","headers","credentials","filter","listItem","timeDone","Date","now","newList","action","onSubmit","preventDefault","trim","length","data","time","handleSubmit","placeholder","sort","a","b","map","key","style","textAlign","current","focus","marginBottom","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b302628d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nfunction ItemDone(props) {\n  return (\n    <li className=\"todo__item\">\n      <input\n        type=\"checkbox\"\n        name=\"check\"\n        id=\"\"\n        checked={true}\n        disabled={true}\n      />\n      {props.item.title}\n    </li>\n  );\n}\n\nfunction Item(props) {\n  const [edit, setEdit] = useState(false);\n  const [check, setCheck] = useState(props.item.isDone);\n  const [title, setTitle] = useState(\"\");\n  const inputElement = useRef();\n\n  return (\n    <li className=\"todo__item\">\n      <input\n        type=\"checkbox\"\n        name=\"check\"\n        id=\"\"\n        checked={check}\n        onChange={() => {\n          setCheck(!check);\n          props.handleCheck(props.item, props.index);\n        }}\n        disabled={props.isWorking ? true : false}\n      />\n      {edit && (\n        <input\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          ref={inputElement}\n        />\n      )}\n      {!edit && props.item.title}\n      <div className=\"action\">\n        <button\n          onClick={() => {\n            if (!edit) {\n              setEdit(!edit);\n              setTitle(props.item.title);\n              props.setWorking(true);\n            } else {\n              setEdit(!edit);\n              props.handleEdit(props.item, title, props.index);\n            }\n          }}\n          disabled={props.isWorking && !edit ? true : false}\n        >\n          {edit ? \"Xong\" : \"Sửa\"}\n        </button>\n        <button\n          onClick={() => props.handleDetele(props.item._id)}\n          disabled={props.isWorking ? true : false}\n        >\n          Xóa\n        </button>{\" \"}\n      </div>\n    </li>\n  );\n}\n\nfunction App() {\n  const [list, setList] = useState([]);\n  const [listDone, setListDone] = useState([]);\n  const [showListDone, setShowListDone] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [msg, setMsg] = useState();\n  const [error, setError] = useState();\n  const [isWorking, setWorking] = useState(false);\n\n  const formInput = useRef();\n\n  useEffect(() => {\n    fetch(\"/api/todo\")\n      .then((rs) => (rs.status === 200 ? rs.json() : rs.text()))\n      .then((rs) => (typeof rs === \"string\" ? setError(rs) : setList(rs)))\n      .catch((e) => console.log(e));\n\n    fetch(\"/api/todo?done=true\")\n      .then((rs) => (rs.status === 200 ? rs.json() : rs.text()))\n      .then((rs) => (typeof rs === \"string\" ? setError(rs) : setListDone(rs)))\n      .catch((e) => console.log(e));\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!title.trim().length) {\n      setMsg(\"Nhập công việc trước bạn ei!\");\n      return;\n    }\n\n    setWorking(true);\n\n    fetch(\"/api/todo\", {\n      method: \"POST\",\n      body: JSON.stringify({ title }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\",\n    })\n      .then((rs) => (rs.status === 200 ? rs.json() : rs.text))\n      .then((data) => {\n        if (typeof data === \"string\") {\n          setError(data);\n          return;\n        }\n        setList([\n          {\n            _id: data._id,\n            time: data.time,\n            title: data.title,\n            isDone: data.isDone,\n          },\n          ...list,\n        ]);\n        setTitle(\"\");\n        setMsg();\n        setError();\n        setWorking(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setWorking(false);\n      });\n  };\n\n  const handleDetele = (id) => {\n    setWorking(true);\n    fetch(\"/api/todo\", {\n      method: \"DELETE\",\n      body: JSON.stringify({ id }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\",\n    })\n      .then((rs) => {\n        rs.status === 200\n          ? setList(list.filter((item) => item._id !== id))\n          : setError(true);\n        setWorking(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setWorking(false);\n      });\n  };\n\n  const handleCheck = (item) => {\n    setWorking(true);\n    fetch(\"/api/todo\", {\n      method: \"PUT\",\n      body: JSON.stringify({\n        id: item._id,\n        title: item.title,\n        isDone: !item.isDone,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\",\n    }).then((rs) => {\n      if (rs.status === 200) {\n        setList(list.filter((listItem) => listItem._id !== item._id));\n        setListDone([{ ...item, timeDone: Date.now() }, ...listDone]);\n        setError();\n        setWorking(false);\n      } else {\n        setError(\"Úi lỗi rồi!\");\n        setWorking(false);\n      }\n    });\n  };\n\n  const handleEdit = (item, title, index) => {\n    fetch(\"/api/todo\", {\n      method: \"PUT\",\n      body: JSON.stringify({\n        id: item._id,\n        title: title,\n        isDone: item.isDone,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }).then((rs) => {\n      if (rs.status === 200) {\n        const newList = [...list];\n        newList[index].title = title;\n        setList(newList);\n        setError();\n        setWorking(false);\n      } else {\n        setError(\"Úi lỗi rồi!\");\n        setWorking(false);\n      }\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>TODO App</h1>\n      {error && <p className=\"error\">Úi, lỗi rồi!</p>}\n      <form\n        action=\"\"\n        method=\"POST\"\n        className=\"todo__form\"\n        onSubmit={(e) => handleSubmit(e)}\n      >\n        <input\n          type=\"text\"\n          name=\"title\"\n          id=\"\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          ref={formInput}\n          placeholder=\"Công việc hôm nay của bạn là gì?\"\n          disabled={isWorking ? true : false}\n        />\n      </form>\n      <ul className=\"todo__list\">\n        {list.length > 0 &&\n          list\n            .sort((a, b) => b.time - a.time)\n            .map((item, index) => (\n              <Item\n                key={item._id}\n                item={item}\n                index={index}\n                handleCheck={handleCheck}\n                handleDetele={handleDetele}\n                handleEdit={handleEdit}\n                isWorking={isWorking}\n                setWorking={setWorking}\n              />\n            ))}\n\n        {list.length === 0 && (\n          <li\n            style={{ textAlign: \"center\" }}\n            onClick={() => formInput.current.focus()}\n          >\n            {msg ? msg : \"Thêm một công việc để bắt đầu nào!\"}\n          </li>\n        )}\n      </ul>\n      <ul className=\"todo__list--done\">\n        <li\n          onClick={() => setShowListDone(!showListDone)}\n          style={{ textAlign: \"center\", marginBottom: \"20px\" }}\n        >\n          Xem các mục đã hoàn thành\n        </li>\n        {showListDone &&\n          listDone.length > 0 &&\n          listDone\n            .sort((a, b) => b.timeDone - a.timeDone)\n            .map((item) => {\n              return [<ItemDone key={item._id} item={item} />];\n            })}\n        {showListDone && listDone.length === 0 && (\n          <li style={{ textAlign: \"center\", color: \"#999999\" }}>\n            Chưa hoàn thành công việc nào!\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}